#####################################################################
#  Display
#####################################################################

##   Fysetc Mini 12864 Display (V2.1)
##   https://wiki.fysetc.com/Mini12864_Panel/
[display]
lcd_type: uc1701
cs_pin: EXP1_3
a0_pin: EXP1_4
rst_pin: EXP1_5
contrast: 63
encoder_pins: ^EXP2_5, ^EXP2_3
click_pin: ^!EXP1_2
## Some micro-controller boards may require an spi bus to be specified:
#spi_bus: spi
## Alternatively, some micro-controller boards may work with software spi:
#spi_software_miso_pin: EXP2_1
#spi_software_mosi_pin: EXP2_6
#spi_software_sclk_pin: EXP2_2
#display_group: __voron_display

##   Neopixel interface on Mini 12864 Display
[neopixel neo_display]
pin: EXP1_6
chain_count: 3
color_order: RGB
initial_RED: 0.1
initial_GREEN: 0.5
initial_BLUE: 0.0

#  Set RGB values on boot up for each Neopixel. 
#  Index 1 = display, Index 2 and 3 = Knob
[delayed_gcode setdisplayneopixel]
initial_duration: 1
gcode:
        SET_LED LED=fysetc_mini12864 RED=1 GREEN=1 BLUE=1 INDEX=1 TRANSMIT=0
        SET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0
        SET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=3

[output_pin BEEPER_pin]
pin: EXP1_1
pwm: true
value: 0
shutdown_value: 0
cycle_time: 0.01


#####################################################################
#  Custom Glyph Definitions
#####################################################################

[display_glyph chamber]
data:
  ................
  ****************
  *....*....*....*
  *....*....*....*
  *....******....*
  *..............*
  *..............*
  *.....****.....*
  *.***.*..*.***.*
  *.....****.....*
  *......**......*
  *..............*
  *.************.*
  *...*......*...*
  ****************
  ................

[display_glyph thermometer]
data:
    0000000000000000
    0000000000000000
    0000000000111000
    0000000001000100
    0000000010010100
    0000000100100100
    0000001001001000
    0000010010010000
    0001100100100000
    0010001001000000
    0100100010000000
    0101110100000000
    0100100100000000
    0010001000000000
    0001110000000000
    0000000000000000

[display_glyph voron]
data:
 ......***.......
 ....*******.....
 ...*********....
 .*************..
 *****..***..***.
 ****..***..****.
 ***..***..*****.
 **..***..******.
 ******..***..**.
 *****..***..***.
 ****..***..****.
 ***..***..*****.
 .*************..
 ...*********....
 ....*******.....
 ......***.......


#####################################################################
#  Display Template/Definition
#####################################################################

[display_template _chamber_temperature]
text:
  {% set chamber = printer['temperature_sensor chamber'] %}
  ~chamber~
  { "%3.0f" % (chamber.temperature,) }
  ~degrees~

[display_template _vprint_status]
text:
  {% if printer.display_status.message %}
    { printer.display_status.message }
  {% elif printer.idle_timeout.printing_time %}
    {% set pos = printer.toolhead.position %}
    { "X%-4.0fY%-4.0fZ%-5.2f" % (pos.x, pos.y, pos.z) }
  {% else %}
    ~voron~
    {" VS.???"}
  {% endif %}

[display_data __voron_display extruder]
position: 0, 0
text: { render("_heater_temperature", param_heater_name= printer.toolhead.extruder) }

[display_data __voron_display fan]
position: 0, 10
text:{ render("_fan_speed") }

[display_data __voron_display heater_bed]
position: 1, 0
text: { render("_heater_temperature", param_heater_name="heater_bed") }

[display_data _voron_display speed_factor]
position: 1, 10
text:
  ~feedrate~
  { "{:>4.0%}".format(printer.gcode_move.speed_factor) }

[display_data __voron_display print_progress]
position: 2, 0
text: { "{:^10.0%}".format(printer.display_status.progress) }

[display_data __voron_display progress_bar]
position: 2, 1  # Draw graphical progress bar after text is written
text: { draw_progress_bar(2, 0, 10, printer.display_status.progress) }

[display_data __voron_display printing_time]
position: 2, 10
text: { "%6s" % (render("_printing_time").strip(),) }

[display_data __voron_display print_status]
position: 3, 0
text : { render("_vprint_status") }


#####################################################################
#  Display Specific Macros
#####################################################################

##   Audible Beep
#  Volume can be adjusted with VALUE. Maximum volume is VALUE=0.5 on the 12864.
[gcode_macro M300]
default_parameter_S: 1000
default_parameter_P: 100
gcode:
    {% if S|float != 0 %}
        SET_PIN PIN=_BEEPER VALUE=0.5 CYCLE_TIME={1/S|float}
    {% endif %}
    G4 P{P}
    SET_PIN PIN=_BEEPER VALUE=0
 

##  Clear display after Duration  
[delayed_gcode _CLEAR_DISPLAY]
gcode:
  M117


[delayed_gcode _LCD_INIT_KNOB]
initial_duration: 1
gcode:
  _LCD_KNOB COLOR=GREEN


[delayed_gcode _LCD_INIT_OFF]
initial_duration: 10
gcode:
  SET_GCODE_VARIABLE MACRO=DISPLAY VARIABLE=state VALUE='"off"'
  SET_LED LED=neo_display RED=0 GREEN=0 BLUE=0 INDEX=1 TRANSMIT=1


[gcode_macro _LCD_KNOB]
default_parameter_BLINK: 0
variable_color: 'GREEN'
variable_restore: 'GREEN'
variable_index: 2
variable_blink: 0
gcode:
  {% set var_color=printer["gcode_macro _LCD_KNOB"].color %}
  {% set var_restore=printer["gcode_macro _LCD_KNOB"].restore %}
  SET_GCODE_VARIABLE MACRO=_LCD_KNOB VARIABLE=blink VALUE={BLINK}
  UPDATE_DELAYED_GCODE ID=_BLINK_DELAY DURATION={BLINK|float}
  SET_GCODE_VARIABLE MACRO=_LCD_KNOB VARIABLE=restore VALUE='"{var_color}"'
  {% if params.COLOR == 'GREEN'%}
    SET_GCODE_VARIABLE MACRO=_LCD_KNOB VARIABLE=color VALUE='"GREEN"'
    SET_LED LED=neo_display RED=0 GREEN=0.3 BLUE=0 INDEX=2 TRANSMIT=0
    SET_LED LED=neo_display RED=0 GREEN=0.3 BLUE=0 INDEX=3 TRANSMIT=1
  {% elif params.COLOR == 'RED'%}
    SET_GCODE_VARIABLE MACRO=_LCD_KNOB VARIABLE=color VALUE='"RED"'
    SET_LED LED=neo_display RED=0.5 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0
    SET_LED LED=neo_display RED=0.5 GREEN=0 BLUE=0 INDEX=3 TRANSMIT=1
  {% elif params.COLOR == 'BLUE'%}
    SET_GCODE_VARIABLE MACRO=_LCD_KNOB VARIABLE=color VALUE='"BLUE"'
    SET_LED LED=neo_display RED=0 GREEN=0 BLUE=0.5 INDEX=2 TRANSMIT=0
    SET_LED LED=neo_display RED=0 GREEN=0 BLUE=0.5 INDEX=3 TRANSMIT=1
  {% else %}
    {% if var_restore == 'GREEN'%}
      SET_GCODE_VARIABLE MACRO=_LCD_KNOB VARIABLE=color VALUE='"GREEN"'
      SET_LED LED=neo_display RED=0 GREEN=0.3 BLUE=0 INDEX=2 TRANSMIT=0
      SET_LED LED=neo_display RED=0 GREEN=0.3 BLUE=0 INDEX=3 TRANSMIT=1
    {% elif var_restore == 'RED'%}
      SET_GCODE_VARIABLE MACRO=_LCD_KNOB VARIABLE=color VALUE='"RED"'
      SET_LED LED=neo_display RED=0.5 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0
      SET_LED LED=neo_display RED=0.5 GREEN=0 BLUE=0 INDEX=3 TRANSMIT=1
    {% elif var_restore == 'BLUE'%}
      SET_GCODE_VARIABLE MACRO=_LCD_KNOB VARIABLE=color VALUE='"BLUE"'
      SET_LED LED=neo_display RED=0 GREEN=0 BLUE=0.5 INDEX=2 TRANSMIT=0
      SET_LED LED=neo_display RED=0 GREEN=0 BLUE=0.5 INDEX=3 TRANSMIT=1
    {% endif %}
  {% endif %}


[delayed_gcode _BLINK_DELAY]
gcode:
  {% set var_color=printer["gcode_macro _LCD_KNOB"].color %}
  {% if printer["gcode_macro _LCD_KNOB"].index|int == 2 %}
    SET_GCODE_VARIABLE MACRO=_LCD_KNOB VARIABLE=index VALUE=3
    {% if var_color == 'GREEN'%}
      SET_LED LED=neo_display RED=0.0 GREEN=0.3 BLUE=0.0 INDEX=2 TRANSMIT=0
      SET_LED LED=neo_display RED=0.0 GREEN=0.0 BLUE=0.0 INDEX=3 TRANSMIT=1
    {% elif var_color == 'RED'%}
      SET_LED LED=neo_display RED=0.5 GREEN=0.0 BLUE=0.0 INDEX=2 TRANSMIT=0
      SET_LED LED=neo_display RED=0.0 GREEN=0.0 BLUE=0.0 INDEX=3 TRANSMIT=1
    {% elif var_color == 'BLUE'%}
      SET_LED LED=neo_display RED=0.0 GREEN=0.0 BLUE=0.5 INDEX=2 TRANSMIT=0
      SET_LED LED=neo_display RED=0.0 GREEN=0.0 BLUE=0.0 INDEX=3 TRANSMIT=1
    {% endif %}
  {% else %}
    SET_GCODE_VARIABLE MACRO=_LCD_KNOB VARIABLE=index VALUE=2
    {% if var_color == 'GREEN'%}
      SET_LED LED=neo_display RED=0.0 GREEN=0.0 BLUE=0.0 INDEX=2 TRANSMIT=0
      SET_LED LED=neo_display RED=0.0 GREEN=0.3 BLUE=0.0 INDEX=3 TRANSMIT=1
    {% elif var_color == 'RED'%}
      SET_LED LED=neo_display RED=0.0 GREEN=0.0 BLUE=0.0 INDEX=2 TRANSMIT=0
      SET_LED LED=neo_display RED=0.5 GREEN=0.0 BLUE=0.0 INDEX=3 TRANSMIT=1
    {% elif var_color == 'BLUE'%}
      SET_LED LED=neo_display RED=0.0 GREEN=0.0 BLUE=0.0 INDEX=2 TRANSMIT=0
      SET_LED LED=neo_display RED=0.0 GREEN=0.0 BLUE=0.5 INDEX=3 TRANSMIT=1
    {% endif %}
  {% endif %}
  UPDATE_DELAYED_GCODE ID=_BLINK_DELAY DURATION={printer["gcode_macro _LCD_KNOB"].blink|float}


[gcode_macro DISPLAY]
variable_state: 'on'
gcode:
  {% if printer["gcode_macro DISPLAY"].state == 'on' %}
    _DISPLAY_OFF
  {% else %}
    _DISPLAY_ON
  {% endif %}


[gcode_macro _display_state]
gcode:
  {action_respond_info("LCD display %s" % (printer["gcode_macro DISPLAY"].state))}


[gcode_macro _DISPLAY_OFF]
## Display off to hinder burn in
gcode:
  SET_GCODE_VARIABLE MACRO=DISPLAY VARIABLE=state VALUE='"off"'
  SET_LED LED=neo_display RED=0 GREEN=0 BLUE=0 INDEX=1 TRANSMIT=1
  _display_state


[gcode_macro _DISPLAY_ON]
## Display on
gcode:
  SET_GCODE_VARIABLE MACRO=DISPLAY VARIABLE=state VALUE='"on"'
  SET_LED LED=neo_display RED=0.8 GREEN=0.8 BLUE=1.0 INDEX=1 TRANSMIT=1
  _display_state
