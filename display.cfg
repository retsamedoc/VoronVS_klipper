#####################################################################
#  Display
#####################################################################

##   Fysetc Mini 12864 Display (V2.1)
##   https://wiki.fysetc.com/Mini12864_Panel/
[display]
lcd_type: uc1701
cs_pin: EXP1_3
a0_pin: EXP1_4
rst_pin: EXP1_5
contrast: 63
encoder_pins: ^EXP2_5, ^EXP2_3
click_pin: ^!EXP1_2
## Some micro-controller boards may require an spi bus to be specified:
#spi_bus: spi
## Alternatively, some micro-controller boards may work with software spi:
#spi_software_miso_pin: EXP2_1
#spi_software_mosi_pin: EXP2_6
#spi_software_sclk_pin: EXP2_2
#display_group: __voron_display

##   Neopixel interface on Mini 12864 Display
[neopixel neo_display]
pin: EXP1_6
chain_count: 3
color_order: RGB
initial_RED: 0.0
initial_GREEN: 0.0
initial_BLUE: 0.0

#  Set RGB values on boot up for each Neopixel. 
#  Index 1 = display, Index 2 and 3 = Knob
[delayed_gcode setdisplayneopixel]
initial_duration: 1
gcode:
        SET_LED LED=fysetc_mini12864 RED=1 GREEN=1 BLUE=1 INDEX=1 TRANSMIT=0
        SET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0
        SET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=3

[output_pin BEEPER_pin]
pin: EXP1_1
pwm: true
value: 0
shutdown_value: 0
cycle_time: 0.01


#####################################################################
#  Custom Glyph Definitions
#####################################################################

[display_glyph chamber]
data:
  ................
  ****************
  *....*....*....*
  *....*....*....*
  *....******....*
  *..............*
  *..............*
  *.....****.....*
  *.***.*..*.***.*
  *.....****.....*
  *......**......*
  *..............*
  *.************.*
  *...*......*...*
  ****************
  ................

[display_glyph thermometer]
data:
    0000000000000000
    0000000000000000
    0000000000111000
    0000000001000100
    0000000010010100
    0000000100100100
    0000001001001000
    0000010010010000
    0001100100100000
    0010001001000000
    0100100010000000
    0101110100000000
    0100100100000000
    0010001000000000
    0001110000000000
    0000000000000000

[display_glyph voron]
data:
 ......***.......
 ....*******.....
 ...*********....
 .*************..
 *****..***..***.
 ****..***..****.
 ***..***..*****.
 **..***..******.
 ******..***..**.
 *****..***..***.
 ****..***..****.
 ***..***..*****.
 .*************..
 ...*********....
 ....*******.....
 ......***.......


#####################################################################
#  Display Template/Definition
#####################################################################

[display_template _chamber_temperature]
text:
  {% set chamber = printer['temperature_sensor chamber'] %}
  ~chamber~
  { "%3.0f" % (chamber.temperature,) }
  ~degrees~

[display_template _vprint_status]
text:
  {% if printer.display_status.message %}
    { printer.display_status.message }
  {% elif printer.idle_timeout.printing_time %}
    {% set pos = printer.toolhead.position %}
    { "X%-4.0fY%-4.0fZ%-5.2f" % (pos.x, pos.y, pos.z) }
  {% else %}
    ~voron~
    {" VS.???"}
  {% endif %}

[display_data __voron_display extruder]
position: 0, 0
text: { render("_heater_temperature", param_heater_name= printer.toolhead.extruder) }

[display_data __voron_display fan]
position: 0, 10
text:{ render("_fan_speed") }

[display_data __voron_display heater_bed]
position: 1, 0
text: { render("_heater_temperature", param_heater_name="heater_bed") }

[display_data _voron_display speed_factor]
position: 1, 10
text:
  ~feedrate~
  { "{:>4.0%}".format(printer.gcode_move.speed_factor) }

[display_data __voron_display print_progress]
position: 2, 0
text: { "{:^10.0%}".format(printer.display_status.progress) }

[display_data __voron_display progress_bar]
position: 2, 1  # Draw graphical progress bar after text is written
text: { draw_progress_bar(2, 0, 10, printer.display_status.progress) }

[display_data __voron_display printing_time]
position: 2, 10
text: { "%6s" % (render("_printing_time").strip(),) }

[display_data __voron_display print_status]
position: 3, 0
text : { render("_vprint_status") }


#####################################################################
#  Display Specific Macros
#####################################################################

##   Audible Beep
#  Volume can be adjusted with VALUE. Maximum volume is VALUE=0.5 on the 12864.
[gcode_macro M300]
#   Use a default 1kHz tone if S is omitted.
#   Use a 10ms duration is P is omitted.
gcode:
    {% if params.S|float != 0 %}
        SET_PIN PIN=_BEEPER VALUE=0.5 CYCLE_TIME={1/params.S|default(1000)|float}
    {% endif %}
    G4 P{params.P|default(100)|int}
    SET_PIN PIN=_BEEPER VALUE=0
 

##  Clear display after Duration  
[delayed_gcode _CLEAR_DISPLAY]
gcode:
  M117

[delayed_gcode _LCD_INIT_KNOB]
initial_duration: 1
gcode:
  _LCD_KNOB COLOR=YELLOW


[delayed_gcode _LCD_INIT_OFF]
initial_duration: 10
gcode:
  {% if printer['gcode_macro _USER_VARIABLE'].hw.display.ena %} 
    _LCD_KNOB COLOR=YELLOW SYNC=1
    UPDATE_DELAYED_GCODE ID=_DELAY_DISPLAY_OFF DURATION=10
  {% endif %}


[gcode_macro _LCD_KNOB]
description: Helper: Set LCD Knob color
variable_knob: {'act'    : {'pri':{'R':0.0, 'G':0.3, 'B':0.0},
                            'sec':{'R':0.0, 'G':0.0, 'B':0.0}},
                'restore': {'pri':{'R':0.0, 'G':0.0, 'B':0.0},
                            'sec':{'R':0.0, 'G':0.0, 'B':0.0}},
                'time'   : 0,
                'sync'   : 0}
variable_select: 1  ; used to select what neopixel is active while blinking
gcode:
  ##### color definition #####
  {% set color_dic = {'OFF'  :     {'R':0.0, 'G':0.0, 'B':0.0},
                      'GREEN':     {'R':0.0, 'G':0.3, 'B':0.0},
                      'TURQUOISE': {'R':0.0, 'G':0.3, 'B':0.3},
                      'CYAN':      {'R':0.0, 'G':0.3, 'B':0.5},
                      'OCEAN':     {'R':0.0, 'G':0.1, 'B':0.5},
                      'BLUE':      {'R':0.0, 'G':0.0, 'B':0.5},
                      'VIOLET':    {'R':0.3, 'G':0.0, 'B':0.5},
                      'MAGENTA':   {'R':0.5, 'G':0.0, 'B':0.5},
                      'RASPBERRY': {'R':0.5, 'G':0.0, 'B':0.3},
                      'RED':       {'R':0.5, 'G':0.0, 'B':0.0},
                      'ORANGE':    {'R':0.5, 'G':0.1, 'B':0.0},
                      'YELLOW':    {'R':0.5, 'G':0.3, 'B':0.0},
                      'SP GREEN':  {'R':0.3, 'G':0.3, 'B':0.0}} %}
  ##### get PARAMETERS or use defaults values #####
  {% set _dummy = knob.update({'time': params.BLINK|default(0)|float}) %}
  {% set _dummy = knob.update({'sync': params.SYNC|default(0)|int}) %}
  {% if 'COLOR' in params|upper %}
    {% set color = params.COLOR|upper %}
    {% set _dummy = knob.restore.update({'pri':knob.act.pri}) %}
    {% if color in color_dic %}
      {% set _dummy = knob.act.update({'pri':color_dic[color]}) %}
    {% else %}
      {action_respond_info("LCD KNOB COLOR %s is not defined used default: GREEN" % color)}
      {% set _dummy = knob.act.update({'pri':color_dic.GREEN}) %}
    {% endif %}
  {% else %}
    {% set _dummy = knob.act.update({'pri':knob.restore.pri}) %}
  {% endif %}
  ##### store new variable values #####
  SET_GCODE_VARIABLE MACRO=_LCD_KNOB VARIABLE=knob VALUE="{knob}"
  ##### update to new color and start or stop blinking #####
  SET_LED LED=neo_display RED={knob.act.pri.R} GREEN={knob.act.pri.G}  BLUE={knob.act.pri.B} INDEX=2 TRANSMIT=0 SYNC={knob.sync}
  SET_LED LED=neo_display RED={knob.act.pri.R} GREEN={knob.act.pri.G}  BLUE={knob.act.pri.B} INDEX=3 TRANSMIT=1 SYNC={knob.sync}
  UPDATE_DELAYED_GCODE ID=_BLINK_DELAY DURATION={knob.time}

[delayed_gcode _BLINK_DELAY]
gcode:
  {% set knob = printer["gcode_macro _LCD_KNOB"].knob %}
  {% set i = [2,3] if printer["gcode_macro _LCD_KNOB"].select|int == 1 else [3,2] %}
  SET_GCODE_VARIABLE MACRO=_LCD_KNOB VARIABLE=select VALUE={(printer["gcode_macro _LCD_KNOB"].select|int * -1)}
  SET_LED LED=neo_display RED={knob.act.pri.R} GREEN={knob.act.pri.G} BLUE={knob.act.pri.B} INDEX={i[0]} TRANSMIT=0 SYNC={knob.sync}
  SET_LED LED=neo_display RED={knob.act.sec.R} GREEN={knob.act.sec.G} BLUE={knob.act.sec.B} INDEX={i[1]} TRANSMIT=1 SYNC={knob.sync}
  UPDATE_DELAYED_GCODE ID=_BLINK_DELAY DURATION={knob.time}

[gcode_macro DISPLAY]
description: Toggle Display backlight
variable_state: 'on'
gcode:
  {% if state == 'on' %} _DISPLAY_OFF {% else %} _DISPLAY_ON {% endif %}
  _DISPLAY_STATE
    
[gcode_macro _DISPLAY_STATE]
description: Helper: Print display backlight state
gcode: {action_respond_info("LCD display %s" % (printer["gcode_macro DISPLAY"].state))}

[gcode_macro _DISPLAY_OFF]
description: Helper: Display backlight off
gcode:
  {% if not printer.menu.running and printer['gcode_macro _USER_VARIABLE'].hw.display.ena %}
    SET_GCODE_VARIABLE MACRO=DISPLAY VARIABLE=state VALUE='"off"'
    SET_LED LED=neo_display RED=0 GREEN=0 BLUE=0 INDEX=1 TRANSMIT=1 SYNC=0
  {% endif %}

[gcode_macro _DISPLAY_ON]
description: Helper: Display backlight on
gcode:
  {% if printer['gcode_macro _USER_VARIABLE'].hw.display.ena %}
    SET_GCODE_VARIABLE MACRO=DISPLAY VARIABLE=state VALUE='"on"'
    SET_LED LED=neo_display RED=0.8 GREEN=0.8 BLUE=1.0 INDEX=1 TRANSMIT=1 SYNC=0
  {% endif %}

[delayed_gcode _DELAY_DISPLAY_OFF]
gcode: _DISPLAY_OFF
